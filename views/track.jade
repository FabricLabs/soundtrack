extends layout

block content

  .well.content-well
    .pull-right
      include partials/track-controls

    .clearfix

    h1.clearfix
      a(href="/#{track._artist.slug}") #{track._artist.name}
      |  &mdash; 
      a(href="/#{track._artist.slug}/#{track.slug}/#{track._id}") #{track.title}
    h4 !{_.uniq(track._credits.map(function(x) { return '<a href="/'+x.slug+'">'+x.name+'</a>'; })).join(', ')}
    p <strong>#{track.duration ? track.duration.toHHMMSS(): 'some unknown'}</strong> of brain-melting audio
    h2 played #{history.length} times

    ul.nav.nav-tabs
      li.active
        a(href="#plays", data-toggle="tab") Plays
      li
        a(href="#sources", data-toggle="tab") Audio Sources
      li
        a(href="#conversation", data-toggle="tab") Conversation

    .tab-content
      .tab-pane.active#plays
        h3 Plays Over Time
        .pull-right today
        .pull-left 30 days ago
        #track-stats

        ul
          for play in history
            li
              a(href="#") #{play.timestamp}
              |  by 
              if (play._curator)
                a(href="/#{play._curator.slug}") #{play._curator.username}
              else
                strong THE MACHINE
              |  in 
              a(href="//#{play._room.slug}.#{config.app.host}") #{play._room.name}
              | .
              
        h4 Top Rooms
        p (only including user queues)
        ul
          for room in topRooms
            li
              a(href="//#{room._id.slug}.#{config.app.host}") #{room._id.name}
              |  played this track 
              strong #{ room.count }
              |  times!

      .tab-pane#sources
        h3 Available Sources

        p If, for some reason, the original source for a recording goes away, soundtrack.io will automatically failover to other sources for the music you're trying to listen to.

        p For example, if someone deletes a YouTube video, soundtrack.io will automatically find another copy of the video for you.

        each list, key in track.sources.toObject()
          h2 #{key}
          if (list)
            each link in list
              case key
                when 'youtube'
                  iframe(width="540", height="295", src="https://www.youtube.com/embed/#{link.id}?enablejsapi=1", frameborder="0")
                when 'soundcloud'
                  iframe(width="100%", height="166", src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/#{link.id}", frameborder="0")
                default
                  li #{link}

        h3 Exact Matches
        each source in dupes
          if (source.sources.youtube && source.sources.youtube.length)
            iframe(width="540", height="295", src="https://www.youtube.com/embed/#{source.sources.youtube[0].id}?enablejsapi=1", frameborder="0")
          if (source.sources.soundcloud && source.sources.soundcloud.length)
            iframe(width="100%", height="166", src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/#{source.sources.soundcloud[0].id}", frameborder="0")

      .tab-pane#conversation
        h3 Conversation
        each message in chats
          include partials/message

block scripts
  style.
    .chart rect {
      fill: steelblue;
      stroke: white;
    }

  script.
    // TODO: embed this in microdata.
    var playsPerDay = [#{playsPerDay}];
    var max = 1;
    playsPerDay.forEach(function(i) {
      max = (i > max) ? i : max;
    });

    var w = 20;
    var h = 80;

    var x = d3.scale.linear()
      .domain([0, 1])
      .range([0, w]);

    var y = d3.scale.linear()
      .domain([0, max + 1 ])
      .rangeRound([0, h]);

    var chart = d3.select('#track-stats').append('svg')
      .attr('class', 'chart')
      .attr('width', '100%')
      .attr('height', h);

    chart.selectAll('rect')
      .data(playsPerDay)
      .enter().append('rect')
      .attr('x', function(d, i) { return x(i) - .5; })
      .attr('y', function(d) { return h - y(d) - .5; })
      .attr('width', w)
      .attr('height', function(d) { return y(d); });

    chart.append('line')
      .attr('x1', 0)
      .attr('x2', w * playsPerDay.length)
      .attr('y1', h - .5)
      .attr('y2', h - .5)
      .style('stroke', '#000');

    chart.selectAll('text')
      .data(playsPerDay)
      .enter()
      .append('text')
      .text(function(d) {
        return d;
      })
      .attr('text-anchor', 'middle')
      .attr('x', function(d, i) {
        return i * (w / playsPerDay.length) + (w / playsPerDay.length - barPadding) / 2;
      })
      .attr('y', function(d) {
        return h - (d * 4) + 14;
      })
      .attr('font-family', 'sans-serif')
      .attr('font-size', '11px')
      .attr('fill', 'white');
